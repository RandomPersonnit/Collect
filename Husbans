from telethon import events, types

from .. import loader, utils


@loader.tds
class AutoReplyModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–æ—Ç–∞ @Collect_your_husbando_bot"""

    strings = {"name": "AutoReply"}

    def __init__(self):
        self.reply_running = False
        self.reply_success_message = "<b>üî• –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ @Collect_your_husbando_bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω<b>"
        self.reply_already_running_message = "‚ùåÔ∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ @Collect_your_husbando_bot —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        self.protecc_command = "/protecc"

        self.husbando_bot = "@Collect_your_husbando_bot"
        self.target_chats = ["@ichigochats"]
        self.target_entities = []

    async def client_ready(self, client, db):
        self.client = client
        for chat in self.target_chats:
            entity = await self.client.get_entity(chat)
            self.target_entities.append(entity)

    @loader.unrestricted
    async def cponcmd(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ @Collect_your_husbando_bot"""
        if self.reply_running:
            await utils.answer(message, self.reply_already_running_message)
            return
        self.reply_running = True
        await utils.answer(message, self.reply_success_message)

    @events.register(events.NewMessage(incoming=True, chats=None, from_users=[self.husbando_bot]))
    async def reply_handler(self, event):
        if event.is_reply and event.reply_to_msg_id and event.out:
            replied_msg = await event.get_reply_message()
            if replied_msg and isinstance(replied_msg.media, types.MessageMediaPhoto):
                anime_name = None
                async for message in self.client.iter_messages(event.chat_id, reverse=True):
                    if message.from_id == self.client.uid and message.text and message.text.startswith(self.protecc_command) and message.text.find(self.husbando_bot) != -1:
                        anime_name = message.text.split(self.protecc_command)[1].strip()
                        break
                if anime_name:
                    for target_entity in self.target_entities:
                        await self.client.send_message(target_entity, f"{self.protecc_command}{self.husbando_bot} {anime_name}")

    @loader.unrestricted
    async def cpoffcmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ @Collect_your_husbando_bot"""
        if not self.reply_running:
            await utils.answer(message, "‚ùåÔ∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return
        self.reply_running = False
        await utils.answer(message, "‚úîÔ∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
